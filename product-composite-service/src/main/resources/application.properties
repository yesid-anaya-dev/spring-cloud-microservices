server.port: 7000
logging.level.root=DEBUG

app.product-service.host=localhost
app.product-service.port=7001

app.recommendation-service.host=localhost
app.recommendation-service.port=7002

app.review-service.host=localhost
app.review-service.port=7003

springdoc.swagger-ui.path=/openapi/swagger-ui.html
springdoc.api-docs.path=/openapi/v3/api-docs
springdoc.packagesToScan=com.example.product.composite.service
springdoc.pathsToMatch=/**

api.common.version=1.0.0
api.common.title=Sample API
api.common.description=Description of the API...
api.common.termsOfService=MY TERMS OF SERVICE
api.common.license=MY LICENSE
api.common.licenseUrl=MY LICENSE URL
api.common.externalDocDesc=MY WIKI PAGE
api.common.externalDocUrl=MY WIKI URL
api.common.contact.name=NAME OF CONTACT
api.common.contact.url=URL TO CONTACT
api.common.contact.email=contact@mail.com

api.responseCodes.ok.description=OK
api.responseCodes.badRequest.description=Bad Request, invalid format of the request. See response message for more information
api.responseCodes.notFound.description=Not found, the specified id does not exist
api.responseCodes.unprocessableEntity.description=Unprocessable entity, input parameters caused the processing to fail. See response message for more information

api.product-composite.get-composite-product.description= Returns a composite view of the specified product id
api.product-composite.get-composite-product.notes= # Normal response \n\
If the requested product id is found the method will return information regarding: \n\
1. Base product information \n\
1. Reviews \n\
1. Recommendations \n\
1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response) \n\
 \n\
# Expected partial and error responses \n\
In the following cases, only a partial response be created (used to simplify testing of error conditions) \n\
 \n\
## Product id 113 \n\
200 - Ok, but no recommendations will be returned \n\
 \n\
## Product id 213 \n\
200 - Ok, but no reviews will be returned \n\
 \n\
## Non numerical product id \n\
400 - A **Bad Request** error will be returned \n\
 \n\
## Product id 13 \n\
404 - A **Not Found** error will be returned \n\
 \n\
## Negative product ids \n\
422 - An **Unprocessable Entity** error will be returned

api.product-composite.create-composite-product.description= Creates a composite product
api.product-composite.create-composite-product.notes= # Normal response \n\
The composite product information posted to the API will be split up and stored as separate product-info, recommendation and review entities. \n\
 \n\
# Expected error responses \n\
1. If a product with the same productId as specified in the posted information already exists, \n\
an **422 - Unprocessable Entity** error with a "duplicate key" error message will be returned

api.product-composite.delete-composite-product.description= Deletes a product composite
api.product-composite.delete-composite-product.notes: # Normal response \n\
Entities for product information, recommendations and reviews related to the specified productId will be deleted. \n\
The implementation of the delete method is idempotent, i.e. it can be called several times with the same response. \n\
 \n\
This means that a delete request of a non-existing product will return **200 Ok**.